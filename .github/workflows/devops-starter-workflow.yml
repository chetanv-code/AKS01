name: Build and Deploy to AKS
on:
  push:
    branches:
      - master
    paths: 
       - 'Application/**'
       - 'ArmTemplates/**'

  workflow_dispatch:

env:
  RESOURCEGROUPNAME: "AKS01-rg"
  LOCATION: "East US"
  SUBSCRIPTIONID: "8a7df5bb-627e-4679-8219-2679d6c37440"
  IMAGENAME: "aks01c0d1"
  REGISTRYSKU: "Standard"
  REGISTRYNAME: "aks01acr2345"
  REGISTRYLOCATION: "South Central US"
  CLUSTERNAME: "aks01"
  APPINSIGHTSLOCATION: "East US"
  CLUSTERLOCATION: "East US"
  AGENTCOUNT: "1"
  AGENTVMSIZE: "Standard_DS2_v2"
  KUBERNETESVERSION: 1.25.5
  OMSLOCATION: "East US"
  OMSWORKSPACENAME: "aks01ab61"
  HTTPSAPPLICATIONROUTINGENABLED: false
  KUBERNETESAPI: "apps/v1"
  NAMESPACE: "aks016cbb"
  #GDN_TRIVY_IMAGEPATH: aks01acr2345.azurecr.io/aks01c0d1:${{ github.sha }}
  GDN_TRIVY_ACTION: image
  GDN_TRIVY_TARGET: aks01acr2345.azurecr.io/aks01c0d1:${{ github.sha }}

jobs:
  build:
    name: Build and push image to container registry
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SECRET }}

    - name: Create AKS Cluster
      uses: azure/arm-deploy@v1
      id: deploy
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/aks-template.json
        parameters: clusterName="${{ env.CLUSTERNAME }}" appInsightsLocation="${{ env.APPINSIGHTSLOCATION }}" clusterLocation="${{ env.CLUSTERLOCATION }}" agentCount="${{ env.AGENTCOUNT }}" agentVMSize="${{ env.AGENTVMSIZE }}" kubernetesVersion="${{ env.KUBERNETESVERSION }}" omsLocation="${{ env.OMSLOCATION }}" omsWorkspaceName="${{ env.OMSWORKSPACENAME }}" httpApplicationRoutingEnabled="${{ env.HTTPSAPPLICATIONROUTINGENABLED }}"  dnsPrefix="${{ env.CLUSTERNAME }}"

    - name: Create ACR
      id: createACR
      run: |
          az acr create -n ${{ env.REGISTRYNAME }} -g ${{ env.RESOURCEGROUPNAME }} --location "${{env.REGISTRYLOCATION}}" --sku ${{env.REGISTRYSKU}} --admin-enabled
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - name: Build and push image to ACR
      id: build-image
      run: |
        echo "::add-mask::${{ steps.createACR.outputs.acr_password }}"
        docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.createACR.outputs.acr_username }} --password ${{ steps.createACR.outputs.acr_password }}
        docker build "$GITHUB_WORKSPACE/Application" -f  "Application/Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        
    #-  name: Aqua Security Trivy
  # You may pin to the exact commit or the version.
  # uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54
       #uses: aquasecurity/trivy-action@0.11.2
       #with:
          # Scan type to use for scanning vulnerability
          #scan-type: # optional, default is image
          # image reference(for backward compatibility)
          #image-ref: 
          # reference of tar file to scan
          #input: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }} # optional, default is 
          # Scan reference
          # scan-ref: # optional, default is .
          # exit code when vulnerabilities were found
          #exit-code: 100 # optional
          # ignore unfixed vulnerabilities
          #ignore-unfixed: # optional, default is false
          # comma-separated list of vulnerability types (os,library)
          #vuln-type: # optional, default is os,library
          # severities of vulnerabilities to be displayed
          #severity: # optional, default is UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # output format (table, json, template)
          #format: # optional, default is table
          # use an existing template for rendering output (@/contrib/gitlab.tpl, @/contrib/junit.tpl, @/contrib/html.tpl)
          #template: # optional, default is 
          # writes results to a file with the specified file name
          #output: # optional, default is 
          # comma separated list of directories where traversal is skipped
          #skip-dirs: # optional, default is 
          # comma separated list of files to be skipped
          #skip-files: # optional, default is 
          # specify where the cache is stored
          #cache-dir: # optional, default is 
          # timeout (default 5m0s)
          #timeout: # optional, default is 
          # filter vulnerabilities with OPA rego language
          #ignore-policy: # optional, default is 
          # hide progress output
          #hide-progress: # optional
          # output all packages regardless of vulnerability
          #list-all-pkgs: # optional, default is false
          # comma-separated list of what security issues to detect
          #scanners: # optional, default is 
          # comma-separated list of relative paths in repository to one or more .trivyignore files
          #trivyignores: # optional, default is 
          # input artifact type (image, fs, repo, archive) for SBOM generation
          #artifact-type: # optional
          # GitHub Personal Access Token (PAT) for submitting SBOM to GitHub Dependency Snapshot API
          #github-pat: # optional
          # path to trivy.yaml config
          #trivy-config: # optional
          # limit severities for SARIF format
          #limit-severities-for-sarif: # optional 
    
     # Run analyzers
    - name: Run Microsoft Security DevOps Analysis
      uses: microsoft/security-devops-action@preview
      continue-on-error: false
      id: msdo
      with: 
        tools: trivy

      # Upload alerts to the Security tab
    - name: Upload alerts to Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.msdo.outputs.sarifFile }}

      # Upload alerts file as a workflow artifact
    - name: Upload alerts file as a workflow artifact
      uses: actions/upload-artifact@v3
      with:  
        name: alerts
        path: ${{ steps.msdo.outputs.sarifFile }}
        
  deploy:
    name: Deploy application to AKS
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SECRET }}

    - name: Get AKS Credentials
      id: getContext
      run: |
          az aks get-credentials --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.CLUSTERNAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.NAMESPACE }}`
        fi

    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"

    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.REGISTRYNAME }}.azurecr.io
        container-registry-username: ${{ steps.getACRCred.outputs.acr_username }}
        container-registry-password: ${{ steps.getACRCred.outputs.acr_password }}
        secret-name: ${{ env.CLUSTERNAME }}dockerauth

    - name: Fetch Application insights key
      id: GetAppInsightsKey
      run: |
        echo "::set-output name=AIKey::`az resource show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --resource-type "Microsoft.Insights/components" --query "properties.InstrumentationKey" -o tsv`"
        echo "::add-mask::`az resource show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --resource-type "Microsoft.Insights/components" --query "properties.InstrumentationKey" -o tsv`"

    - uses: azure/k8s-bake@v1
      id: bakeManifests
      with:
        renderEngine: 'helm'
        helmChart: './Application/charts/sampleapp' 
        overrideFiles: './Application/charts/sampleapp/values.yaml'
        overrides: |
            image.repository:${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}
            image.tag:${{ github.sha }}
            imagePullSecrets:{${{ env.CLUSTERNAME }}dockerauth}
            applicationInsights.InstrumentationKey:${{ steps.GetAppInsightsKey.outputs.AIKey }}
            apiVersion:${{ env.KUBERNETESAPI }}
            extensionApiVersion:${{ env.KUBERNETESAPI }}
        helm-version: 'latest' 
        silent: 'true'

    - uses: azure/k8s-deploy@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        manifests: ${{ steps.bakeManifests.outputs.manifestsBundle }}
        images: |
          ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.CLUSTERNAME }}dockerauth

    - name : Cleanup
      run: | 
        az logout
        rm -rf $GITHUB_WORKSPACE/kubeconfig
